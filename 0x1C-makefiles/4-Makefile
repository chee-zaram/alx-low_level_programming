# The following requirements were in place for this task
# Requirements:
#
# name of the executable: school
# rules: all, clean, fclean, oclean, re
# all: builds your executable
# clean: deletes all Emacs and Vim temporary files along with the executable
# oclean: deletes the object files
# fclean: deletes all Emacs and Vim temporary files, the executable, and the object files
# re: forces recompilation of all source files
# variables: CC, SRC, OBJ, NAME, RM, CFLAGS
# CC: the compiler to be used
# SRC: the .c files
# OBJ: the .o files
# NAME: the name of the executable
# RM: the program to delete files
# CFLAGS: your favorite compiler flags: -Wall -Werror -Wextra -pedantic
# The all rule should recompile only the updated source files
# The clean, oclean, fclean, re rules should never fail
#
# You are not allowed to have a list of all the .o files

CC = gcc
SRC = main.c school.c
OBJ = $(SRC:%.c=%.o)
NAME = school
RM = rm -f
CFLAGS = -Wall -Werror -Wextra -pedantic

# Tell make these don't refer to files and should be rebuilt everytime they are
# called regardless a file with the name exists or not
.PHONY: all clean oclean fclean re

# Compile all .o files to create an executable
all: ${OBJ}
	${CC} ${OBJ} -o ${NAME}

# Explicitly create a .o file from a .c file although make can do this implicitly
%.o: %.c
	${CC} ${CFLAGS} -c -o $@ $<

# Delete all temporary vim and Emacs files as well as our executable
clean:
	${RM} *~ *.swp *.swx *.swo *.swn ${NAME}

# Delete all .o files
oclean:
	${RM} ${OBJ}

# Delete all temp files and the executable as well as the .o files
fclean: clean oclean

# Delete all .o files and recompile the executable
re: oclean all
